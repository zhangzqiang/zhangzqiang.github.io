{"meta":{"title":"WHOOSH","subtitle":"生平有数，学识无涯","description":"张正强、技术分享","author":"Zhengqaing Zhang","url":"http://www.whoosh.site"},"pages":[{"title":"","date":"2018-02-15T07:43:55.192Z","updated":"2016-09-07T10:04:28.000Z","comments":true,"path":"baidu_verify_nvBydHIzNT.html","permalink":"http://www.whoosh.site/baidu_verify_nvBydHIzNT.html","excerpt":"","text":"nvBydHIzNT"},{"title":"","date":"2018-02-15T07:43:55.192Z","updated":"2018-02-10T18:03:24.000Z","comments":true,"path":"categories/index.html","permalink":"http://www.whoosh.site/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-15T07:43:55.207Z","updated":"2018-02-10T18:03:24.000Z","comments":true,"path":"tags/index.html","permalink":"http://www.whoosh.site/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-15T07:43:55.176Z","updated":"2018-02-10T18:03:24.000Z","comments":true,"path":"about/index.html","permalink":"http://www.whoosh.site/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown语法简介","slug":"Markdown语法简介","date":"2016-09-01T12:30:58.000Z","updated":"2018-02-15T13:05:24.184Z","comments":true,"path":"2016/09/01/Markdown语法简介/","link":"","permalink":"http://www.whoosh.site/2016/09/01/Markdown语法简介/","excerpt":"","text":"概述Markdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。 Markdown 并非要取代 HTML，而是以一种简单的书写格式，实现一种更加友好的页面呈现，并且，如果所需的标签不在 Markdown 涵盖范围之内，可以直接在文档里面用 HTML 撰写。但要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。 另外 Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p&gt; 标签，且书写时一定要在 Markdown 标签和内容之间加上空格，例如：# 标题 基本标签段落一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。 如图所示： 换行Markdown 允许段落内的强迫换行，例如直接插入换行符&lt;br/&gt;，如果你确实想要依赖 Markdown 的格式来换行的话，可以在插入处先按入两个以上的空格或者至少一个 Tab 键，然后回车即可。 如图所示： 缩进普通段落不该用空格或制表符来缩进，因为用了也无效，可以通过在段落前添加需要的空格编码，已达到显示效果。 半角空格 &amp;ensp; 或 &amp;#8194; 全角空格 &amp;emsp; 或 &amp;#8195; 不断行空格 &amp;nbsp; 或 &amp;#160; 如图所示： 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用任意数量的 = （一级标题）和 - （二级标题） 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 一级 到 六级 如图所示： 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记 有序列表则使用数字接着一个英文句点，如果排序错乱，Markdown 仍会以第一个数字进行排序，所以，第一个项目最好还是从 1. 开始 区块引用Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。 可以自己先将内容断好行，然后在每行的最前面加上在每一行加上 &gt; ，如区块引用1 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ，如区块引用2 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ，如区块引用2，3 如图所示： 代码 如果要标记一小段行内代码，你可以用反引号把它包起来，如： `代码` 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易 如图所示： 代码区块在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以 如图所示： 超链接超链接允许两种样式： 行内式和参考式。 行内式的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着，最好使用双引号 参考式的形式为： 在链接文字的括号后面再接上另一个方括号 而在第二个方括号里面要填入用以辨识链接的标记 如图所示： 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 其形式为： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 title 文字。 如图所示： 表格Markdown 的表格格式虽然简单，但制作起来是很不容易的。 如图所示： 强调Markdown 使用星号 * 和底线 _ 作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 或 _ 包起来的话，则会被转成 &lt;strong&gt;。但是，如果你的 `或_` 两边都有空白的话，它们就只会被当成普通的符号。 如图所示： 分隔线Markdown 允许在一行中用三个以上的星号、减号、底线来建立一个分隔线，也可以在星号或是减号中间插入空格，但行内不能有其他东西。 如图所示： 其他反斜杠Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \\ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接&lt;http://baidu.com/&gt; 如图所示： 特殊字符在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式 &amp;lt; 和 &amp;amp;。但是 code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体 推荐MarkDown 中文 VSCode 代码编辑器","categories":[{"name":"GitHub","slug":"GitHub","permalink":"http://www.whoosh.site/categories/GitHub/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://www.whoosh.site/tags/Markdown/"}]},{"title":"ReactNative自学01-基础篇","slug":"ReactNative自学01-基础篇","date":"2016-08-25T10:59:58.000Z","updated":"2018-02-15T15:29:47.594Z","comments":true,"path":"2016/08/25/ReactNative自学01-基础篇/","link":"","permalink":"http://www.whoosh.site/2016/08/25/ReactNative自学01-基础篇/","excerpt":"","text":"React-Native技术背景目前跨平台移动开发主要分一下4个主要流派为：Web流，代码转换流，编译流，和虚拟机流。 Web 流：也被称为 Hybrid 技术，它基于 Web 相关技术来实现界面及功能 代码转换流：将某个语言转成 Objective-C、Java 或 C#，然后使用不同平台下的官方工具来开发 编译流：将某个语言编译为二进制文件，生成动态库或打包成 apk/ipa/xap 文件 虚拟机流：通过将某个语言的虚拟机移植到不同平台上来运行 facebook之前投入了大量精力在html5，虽然取得很大进展，但始终不如人意，后来就转向native开发，性能和体验都近乎完美，但无法摆脱苹果的束缚，在版本更新和维护上非常的麻烦，同时，一些公司采用混合开发模式（Hybrid）即：native+web,但是webview的性能在移动断是受限的，所以也不是一种特别好的模式。 之后，facebook在react框架基础上推出react-native(react.js用于开发网页)，在性能上仅次于native，但比Hybrid和html5优越很多。同时，RN不仅可以使用前端开发的模式开发应用，还可以调用原生应用的UI和组件 现在除了Facebook，很多大公司都在尝试这一技术来降低开发和维护成本，如：淘宝部分功能、qq空间、携程部分产品等，而且微软未来在UWP应用上也会支持RN技术。 搭建开发环境 安装node.js，会自动安装包管理器npm，查看安装结果node -v, npm -v 安装java开发环境，java sdk、java jdk，并配置java环境变量，查看环境变量echo %path% 配置环境变量,在系统环境中添加JAVA_HOME,在Path中添%JAVA_HOME%/bin 安装android开发环境，并配置android环境变量 在系统环境中添加ANDROID_HOME,在Path中添加 %ANDROID_HOME%\\tools %ANDROID_HOME%\\platform_tools 在系统环境中添加CLASSPATH,值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar 下载Android SDK, Tools:Android SDK Tools、Android SDK Platform-tools、Android SDK Build tools（必须是版本23.0.1） Android 6.0(API23):SDK Platform、Google APIs、Soucre for Android SDK（如果装虚拟机：Google APIs Intel x86 Atom_64 System Image） Extras:Android Support Repository、Android Support Libarary（Obsolete）、Google USB Driver（如果虚拟机：Inter x86 Emulator Accelerate[HAXM install]） 安装代码编辑环境，我使用的是vscode,可以很方便的调试程序，也可以使用WebStorm。首先，安装react native tools插件，安装Bable ES6/Es7插件 安装代码版本工具，git，方便项目管理，和clone开源资源（可选） 第一个RN项目切换npm镜像12npm config set registry https://registry.npm.taobao.orgnpm config set disturl https://npm.taobao.org/dist 安装react-native-cli1npm install react-native-cli -g //全局安装cli 初始化实例1react-native init Mytest NPM加载开源包123npm install //安装project.json中的资源包npm install 包名 -save //最新版本npm install 包名@2.1.1 -save //指定版本 运行RN项目12react-native run-androidreact-native run-ios 其他常用命令1234567adb devices //查看当前连接设备adb reverse tcp:8081 tcp:8081 //重新链接设备adb shell input keyevent 82 //调出开发者菜单npm cache clean //清理npm本地缓存npm kill-server //结束npmnpm start-server //开启npmreact-native upgrade //更新react-native版本 相关资源 RN官网： http://facebook.github.io/react-native/docs/getting-started.html RN中文官网： http://reactnative.cn/ ES语法： http://es6.ruanyifeng.com/ Android资源：http://www.android-studio.org/ npm淘宝镜像：http://npm.taobao.org/ 所用软件： 密码：oo3t","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"http://www.whoosh.site/categories/ReactNative/"}],"tags":[{"name":"RN","slug":"RN","permalink":"http://www.whoosh.site/tags/RN/"},{"name":"ReactNative","slug":"ReactNative","permalink":"http://www.whoosh.site/tags/ReactNative/"}]}]}