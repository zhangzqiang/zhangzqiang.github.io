{"meta":{"title":"WHOOSH","subtitle":"生平有数，学识无涯","description":"张正强、技术分享","author":"Zhengqaing Zhang","url":"http://www.whoosh.site"},"pages":[{"title":"","date":"2018-02-15T07:43:55.192Z","updated":"2016-09-07T10:04:28.000Z","comments":true,"path":"baidu_verify_nvBydHIzNT.html","permalink":"http://www.whoosh.site/baidu_verify_nvBydHIzNT.html","excerpt":"","text":"nvBydHIzNT"},{"title":"","date":"2018-02-15T07:43:55.176Z","updated":"2018-02-10T18:03:24.000Z","comments":true,"path":"about/index.html","permalink":"http://www.whoosh.site/about/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-15T07:43:55.192Z","updated":"2018-02-10T18:03:24.000Z","comments":true,"path":"categories/index.html","permalink":"http://www.whoosh.site/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-15T07:43:55.207Z","updated":"2018-02-10T18:03:24.000Z","comments":true,"path":"tags/index.html","permalink":"http://www.whoosh.site/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ReactNative自学01-基础篇","slug":"20160925_ReactNative自学01-基础篇","date":"2016-09-25T10:59:58.000Z","updated":"2018-02-16T12:51:46.356Z","comments":true,"path":"2016/09/25/20160925_ReactNative自学01-基础篇/","link":"","permalink":"http://www.whoosh.site/2016/09/25/20160925_ReactNative自学01-基础篇/","excerpt":"","text":"React-Native技术背景目前跨平台移动开发主要分一下4个主要流派为：Web流，代码转换流，编译流，和虚拟机流。 Web 流：也被称为 Hybrid 技术，它基于 Web 相关技术来实现界面及功能 代码转换流：将某个语言转成 Objective-C、Java 或 C#，然后使用不同平台下的官方工具来开发 编译流：将某个语言编译为二进制文件，生成动态库或打包成 apk/ipa/xap 文件 虚拟机流：通过将某个语言的虚拟机移植到不同平台上来运行 facebook之前投入了大量精力在html5，虽然取得很大进展，但始终不如人意，后来就转向native开发，性能和体验都近乎完美，但无法摆脱苹果的束缚，在版本更新和维护上非常的麻烦，同时，一些公司采用混合开发模式（Hybrid）即：native+web,但是webview的性能在移动断是受限的，所以也不是一种特别好的模式。 之后，facebook在react框架基础上推出react-native(react.js用于开发网页)，在性能上仅次于native，但比Hybrid和html5优越很多。同时，RN不仅可以使用前端开发的模式开发应用，还可以调用原生应用的UI和组件 现在除了Facebook，很多大公司都在尝试这一技术来降低开发和维护成本，如：淘宝部分功能、qq空间、携程部分产品等，而且微软未来在UWP应用上也会支持RN技术。 搭建开发环境 安装node.js，会自动安装包管理器npm，查看安装结果node -v, npm -v 安装java开发环境，java sdk、java jdk，并配置java环境变量，查看环境变量echo %path% 配置环境变量,在系统环境中添加JAVA_HOME,在Path中添%JAVA_HOME%/bin 安装android开发环境，并配置android环境变量 在系统环境中添加ANDROID_HOME,在Path中添加 %ANDROID_HOME%\\tools %ANDROID_HOME%\\platform_tools 在系统环境中添加CLASSPATH,值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar 下载Android SDK, Tools:Android SDK Tools、Android SDK Platform-tools、Android SDK Build tools（必须是版本23.0.1） Android 6.0(API23):SDK Platform、Google APIs、Soucre for Android SDK（如果装虚拟机：Google APIs Intel x86 Atom_64 System Image） Extras:Android Support Repository、Android Support Libarary（Obsolete）、Google USB Driver（如果虚拟机：Inter x86 Emulator Accelerate[HAXM install]） 安装代码编辑环境，我使用的是vscode,可以很方便的调试程序，也可以使用WebStorm。首先，安装react native tools插件，安装Bable ES6/Es7插件 安装代码版本工具，git，方便项目管理，和clone开源资源（可选） 第一个RN项目切换npm镜像12npm config set registry https://registry.npm.taobao.orgnpm config set disturl https://npm.taobao.org/dist 安装react-native-cli1npm install react-native-cli -g //全局安装cli 初始化实例1react-native init Mytest NPM加载开源包123npm install //安装project.json中的资源包npm install 包名 -save //最新版本npm install 包名@2.1.1 -save //指定版本 运行RN项目12react-native run-androidreact-native run-ios 其他常用命令1234567adb devices //查看当前连接设备adb reverse tcp:8081 tcp:8081 //重新链接设备adb shell input keyevent 82 //调出开发者菜单npm cache clean //清理npm本地缓存npm kill-server //结束npmnpm start-server //开启npmreact-native upgrade //更新react-native版本 相关资源 RN官网： http://facebook.github.io/react-native/docs/getting-started.html RN中文官网： http://reactnative.cn/ ES语法： http://es6.ruanyifeng.com/ Android资源：http://www.android-studio.org/ npm淘宝镜像：http://npm.taobao.org/ 所用软件：百度网盘 密码：oo3t","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"http://www.whoosh.site/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"http://www.whoosh.site/tags/ReactNative/"}]},{"title":"Markdown语法简介","slug":"20160901_Markdown语法简介","date":"2016-09-01T12:30:58.000Z","updated":"2018-02-16T13:43:23.030Z","comments":true,"path":"2016/09/01/20160901_Markdown语法简介/","link":"","permalink":"http://www.whoosh.site/2016/09/01/20160901_Markdown语法简介/","excerpt":"","text":"概述Markdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。 Markdown 并非要取代 HTML，而是以一种简单的书写格式，实现一种更加友好的页面呈现，并且，如果所需的标签不在 Markdown 涵盖范围之内，可以直接在文档里面用 HTML 撰写。但要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。 另外 Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p&gt; 标签，且书写时一定要在 Markdown 标签和内容之间加上空格，例如：# 标题 基本标签段落一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。 如图所示： 换行Markdown 允许段落内的强迫换行，例如直接插入换行符&lt;br/&gt;，如果你确实想要依赖 Markdown 的格式来换行的话，可以在插入处先按入两个以上的空格或者至少一个 Tab 键，然后回车即可。 如图所示： 缩进普通段落不该用空格或制表符来缩进，因为用了也无效，可以通过在段落前添加需要的空格编码，已达到显示效果。 半角空格 &amp;ensp; 或 &amp;#8194; 全角空格 &amp;emsp; 或 &amp;#8195; 不断行空格 &amp;nbsp; 或 &amp;#160; 如图所示： 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用任意数量的 = （一级标题）和 - （二级标题） 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 一级 到 六级 如图所示： 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记 有序列表则使用数字接着一个英文句点，如果排序错乱，Markdown 仍会以第一个数字进行排序，所以，第一个项目最好还是从 1. 开始 区块引用Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。 可以自己先将内容断好行，然后在每行的最前面加上在每一行加上 &gt; ，如区块引用1 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ，如区块引用2 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ，如区块引用2，3 如图所示： 代码 如果要标记一小段行内代码，你可以用反引号把它包起来，如： `代码` 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易 如图所示： 代码区块在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以 如图所示： 超链接超链接允许两种样式： 行内式和参考式。 行内式的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着，最好使用双引号 参考式的形式为： 在链接文字的括号后面再接上另一个方括号 而在第二个方括号里面要填入用以辨识链接的标记 如图所示： 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 其形式为： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 title 文字。 如图所示： 表格Markdown 的表格格式虽然简单，但制作起来是很不容易的。 如图所示： 强调Markdown 使用星号 * 和底线 _ 作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 或 _ 包起来的话，则会被转成 &lt;strong&gt;。但是，如果你的 `或_` 两边都有空白的话，它们就只会被当成普通的符号。 如图所示： 分隔线Markdown 允许在一行中用三个以上的星号、减号、底线来建立一个分隔线，也可以在星号或是减号中间插入空格，但行内不能有其他东西。 如图所示： 其他反斜杠Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \\ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接&lt;http://baidu.com/&gt; 如图所示： 特殊字符在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式 &amp;lt; 和 &amp;amp;。但是 code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体 推荐MarkDown 中文 VSCode 代码编辑器","categories":[{"name":"Development Language","slug":"Development-Language","permalink":"http://www.whoosh.site/categories/Development-Language/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://www.whoosh.site/tags/Markdown/"}]},{"title":"树莓派3 声音传感器(Win10 IoT)","slug":"20160425_树莓派3 声音传感器-Win10","date":"2016-04-24T16:35:58.000Z","updated":"2018-02-16T13:17:41.701Z","comments":true,"path":"2016/04/25/20160425_树莓派3 声音传感器-Win10/","link":"","permalink":"http://www.whoosh.site/2016/04/25/20160425_树莓派3 声音传感器-Win10/","excerpt":"","text":"序这段时间太忙了，项目收尾一直没有时间继续捣鼓树莓派，正好趁这个双休抽点时间来和我的小伙伴玩耍一把。上篇文章提到我想用Win10 Iot Core和买来的一堆传感器摩擦出一些火花，虽然，已经有很多前辈做过，但是我没有做过啊，没做过又怎么能体会到实践的乐趣呢。先来一张传感器全家福吧！ 声音传感器这么一大堆传感器，要先玩那个呢，啊！纠结症又犯了，挑挑拣拣了好久，最后决定先搞一个简单点的—声音检测传感器。 那么，接下来就是看资料了，还好店家提供相关技术文档，这里为避嫌，就不提供店家地址。其实原理很简单，电路图如下： 以下是我摘录的： 模块描述 可以检测周围环境的声音强度 ,使用注意：此传感器只能识别声音的有无（根据震动原理）不能识别声音的大小或者特定频率的声音 灵敏度可调（图中蓝色数字电位器调节） 工作电压3.3V-5V 输出形式数字开关量输出（0和1高低电平）模块接口说明 VCC外接3.3V-5V电压（可以直接与 5v 单片机和3.3v单片机相连） GND外接GND DO小板数字量输出接口（0和 1）使用说明 声音模块对环境声音强度最敏感，一般用来检测周围环境的声音强度。 模块在环境声音强度达不到设定阈值时，DO口输出高电平，当外界环境声音强度超过设定阈值时，模块 D0输出低电平 小板数字量输出 D0可以与单片机直接相连，通过单片机来检测高低电平，由此来检测环境的声音 检查传感器了解了声音传感器基本结构后，我们要做的就是检查声音传感器是否正常：在相对安静的环境中，将模块的VCC接到树莓派的3.3V PWR电源正极上，将模块的GND接到树莓派的GND上（我选了39），此时，模块的电源指示灯会亮，说明你的传感器OK。如果开关提示也亮了，说明传感器对当前环境声音太灵敏了，可以调节蓝色数字电位器，使之灵敏度降低。附上测试接线图和树莓派GPIO引脚位置图： 如何接线我使用了6根杜邦线（3根公对母，3根公对公），具体接线步骤： 将第一根公对母杜邦线母端接到树莓派3.3V PWR电源引脚上，公端接到面包 板的正极上（红线） 将第二根公对母杜邦线母端接到树莓派GND负极引脚上，公端接到面包板负极上（棕线） 将第三根公对母杜邦线母端接到树莓派GPIO 5引脚上，公端接到LED灯长脚上（灰线） 将第一根公对公杜邦线的一端接到面包板电源正极上，另一端接到传感器VCC上（红线） 将第二根公对公杜邦线的一端接到面包板电源负极上，另一端接到传感器GND上（棕线） 将最后一根公对公杜邦线的一端接到传感器的OutPut(DO)上，另一端接到LED等的短脚上（紫线）。 最后接线如图所示： 代码实现见证奇迹的时刻到了，新建一个UWP空白应用（通用Windows），将以下代码粘到MainPage中，然后部署到树莓派中的Win10中即可。至于怎么安装系统、部署应用和web远程控制，待我下次整理出一个文档，当然，你也可以自己在网上搜。另外：源码来源于网友汪宇杰Edi.Wang。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public sealed partial class MainPage : Page &#123; //LED灯引脚 public GpioPin LedPin &#123; get; set; &#125; //声音传感器引脚 public GpioPin SoundPin &#123; get; set; &#125; //保存LED灯的开关状态 public bool IsLightOn &#123; get; set; &#125; public MainPage() &#123; this.InitializeComponent(); Loaded += OnLoaded; &#125; /// &lt;summary&gt; /// Loaded事件 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"routedEventArgs\"&gt;&lt;/param&gt; private void OnLoaded(object sender, RoutedEventArgs routedEventArgs) &#123; //初始化GPIO控制器 var controller = GpioController.GetDefault(); if (null != controller) &#123; //LED是高电平输出表示开，所以第一次启动的时候要关灯，输出低电平 LedPin = controller.OpenPin(5); LedPin.SetDriveMode(GpioPinDriveMode.Output); LedPin.Write(GpioPinValue.Low); //FC-04的GPIO 06端口是接受信号的，所以是输入 SoundPin = controller.OpenPin(6); SoundPin.SetDriveMode(GpioPinDriveMode.Input); //监测声音传感器引脚值得变化 SoundPin.ValueChanged += (pin, args) =&gt; &#123; //读取引脚值（FC-04传感器只有两个值0、1） var pinValue = SoundPin.Read(); //FC-04检测到声音时候会在DO输出低电平 if (pinValue == GpioPinValue.Low) &#123; Debug.WriteLine(\"Sound Detected!\"); //开关灯操作（设置LED引脚值） LedPin.Write(IsLightOn ? GpioPinValue.Low : GpioPinValue.High); IsLightOn = !IsLightOn; &#125; &#125;; &#125; &#125; &#125; 总结在实践过程中遇到了不少问题，毕竟是小白，有很多不懂不会的地方，但是，还是那句话，只要思想不倒退，办法总比困难多。最后，来看一下效果图吧！","categories":[{"name":"树莓派","slug":"树莓派","permalink":"http://www.whoosh.site/categories/树莓派/"}],"tags":[{"name":"树莓派3","slug":"树莓派3","permalink":"http://www.whoosh.site/tags/树莓派3/"},{"name":"传感器","slug":"传感器","permalink":"http://www.whoosh.site/tags/传感器/"},{"name":"Win10 IoT","slug":"Win10-IoT","permalink":"http://www.whoosh.site/tags/Win10-IoT/"}]},{"title":"树莓派3 使用体验","slug":"20160410_树莓派3 使用体会","date":"2016-04-10T15:35:00.000Z","updated":"2018-02-16T13:40:36.183Z","comments":true,"path":"2016/04/10/20160410_树莓派3 使用体会/","link":"","permalink":"http://www.whoosh.site/2016/04/10/20160410_树莓派3 使用体会/","excerpt":"","text":"序以前听说过树莓派，那时候感觉这玩意离自己很遥远，都是一些极客才会玩的东西。但是，随着微软针对Raspberry Pi推出的Win10 Iot Core版本，便勾起了我的兴趣了，没办法，谁叫我是一个资深软粉呢！虽说有兴趣，但真要买一个玩玩，还是下了很大决心的，主要原因并不是浪费钱（板子不贵，240左右天朝币），而是根据微软这么多年的尿性，怕学了也没什么卵用。当年搞WP开发就被坑了，好在也学到了不少东西，嗯，就这样安慰自己吧。 树莓派3一出来，我就坐不住了，上一周在X宝上攒了一套，包括主板，还有一堆的配件（各种传感器、面包板、杜邦线、小零件），要吐槽一下快递，这种东西店家一般都要收快递费，所以要买的话，一次性买齐。而且不巧的是，当时正赶上深圳的禁摩限电，搞了一周才到货。 还要说一下杜邦线，我拿到货就傻眼了，40根全是母对母的，本以为是公对母的呢，最后想了个办法，把缝衣针折断来替代，也是醉了。说了这么多废话，接下来进入正题。 先来一张定妆照： 使用体验那么这几天我都用这货干了些什么呢，先来看一下有哪些系统可以跑在树莓派上呢，Raspberry Pi官网给出了如下图系统，这些系统下载地址都可以在这个页面中找到，我就尝试了下图中箭头所指的4个系统，那么就逐个来说说体验过程中遇到的问题吧。 RaspBian官方支持的操作系统，Noobs是一个比RaspBian更容易安装的版本，其实都很简单的，网上有这方面的教程，就是通过win32diskimager-v0.9-binary，将img镜像写入到SD卡中，然后把SD卡插到主板上，通电就OK了。我就不在赘述了点击下载 需要强调的是，如果你没有显示器，可以使用替代方法，例如：远程访问，根据上面地址文章中的步骤，进入到RaspBian系统后，安装Linux下远程桌面xrdp即可在window下通过远程桌面访问到桌面版的RaspBian了。 安装远程访问xrdp命令 1sudo apt-get install xrdp Ubuntu Mate使用这个系统的时候，我也想着像上一个步骤那样，通过远程访问来搞定，但现实是残酷滴，我无法知道Ubuntu系统的用户名和密码，就没法登陆进去，这可难倒我了，最终还是办法总是多于困难的，现在的电视机一半都自带VGA或者HDMI接口，这个时候，就可以通过HDMI线或者HDMI转VGA接头连接到电视上，要说明的是，网上说HDMI转接头最好需要带外部电源的，可是我用了个无源的转接头也是Ok的，前提是主板电源输出不要太低，官方说是2.5A，实际上我用的是2.0A。 另外，如果用HDMI直链电视的话，国内的电视显示器分辨率很杂，我家里的就是，接上去也通电了，但就是黑屏，于是各种查啊。这里就需要修改系统分区下config.txt文件，建议使用notepad++打开文档，添加或修改配置项hdmi_ignore_edid=0xa5000080，具体步骤请移步。 Win10 IoT话说我就是因为Win10才买树莓派的，物联网要火了，不能掉队伍不是。而且，在编程方面也有基础，官方提供了很多Demo，光看源码不实操，心里是很痒的，哈哈。所以一拿到货我就装了Win10的系统，需要提醒的是，如果和我一样，使用的是树莓派3，那么就需要下最新版本的系统了，win10正式版10586是不支持Pi3的，之后的可以。而且现在最新的版本系统（14295）还不支持wifi和蓝牙，我就是冲着Pi3自带wifi和蓝牙才放弃pi2的，感谢网友汪宇杰Edi.Wang的告知。 说一下开发过程中遇到的一个坑，按照官方提供的点亮LED程序，发现没法点亮LED灯，导致我一直以为是我接线出了问题，可是接线实在是太简单了，这都错智商岂不是没救了，后来在VS中自己跑了一遍源码，居然就点亮了，真是我勒个去啊。附上官方地址 这里很多文档可以参考，另外Demo下载地址。 OpenElec这个系统是什么货呢，可能知道它的人不多，说通俗点吧，它是多媒体终端系统，可以用作电视盒子，以前叫XBMC现在叫Kodi,装了这个系统，树莓派瞬间就变成了电视盒子了，系统安装过程和装Ubuntu Mate是一样的，装好了如何配置就稍微复杂一些，主要是在更换中文语言的地方一个坑，还有就是想看国内视频网站或电视直播，需要下载中文插件库，好在网上有很多教程，按照教程走问题都不大的，附上教程地址 总结树莓派的可玩性是很强的，可以用它来做一些很有趣的事情，但是怎么有趣就要自己去发掘了。另外，记得我上文提到我买了一堆的传感器吧，接下来，我就要尝试在win10 iot下和这些传感器玩耍了，再次感谢这方面的先锋战士Edi.Wang。","categories":[{"name":"树莓派","slug":"树莓派","permalink":"http://www.whoosh.site/categories/树莓派/"}],"tags":[{"name":"树莓派3","slug":"树莓派3","permalink":"http://www.whoosh.site/tags/树莓派3/"}]}]}